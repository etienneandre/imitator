(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Fischer's mutual exclusion protocol
 *
 * Description     : Fischer's mutual exclusion protocol. Version with observer.
	THIS MODEL IS NO LONGER NEEDED SINCE IMITATOR 2.7.2, AS THE TOOL NOW SUPPORTS TO CHECK SEVERAL LOCATIONS AT THE SAME TIME.
 * Correctness     : No two processes in the mutual exclusion
 * Source          : From "Linear Parametric Model Checking of Timed Automata" Hune, Romijn, Stoelinga, Vaandrager, 2002
 * Author          : Hune, Romijn, Stoelinga, Vaandrager
 * Modeling        : Hune, Romijn, Stoelinga, Vaandrager
 * Input by        : Étienne André
 *
 * Created         : 2013/12/10
 * Fork from fischerHRSV02.imi : 2014/04/08
 * Last modified    : 2021/07/09
 *
 * IMITATOR version: 3.1
 ************************************************************)


var 
	
	x_1, (*P1's clock*)
	x_2, (*P2's clock*)
		:clock;
	

	lock
		: int;

	min_rw = 1, max_rw,
	min_delay = 3, max_delay,
		: parameter;

		

(************************************************************)
automaton pta_1
(************************************************************)
synclabs: enter_1, leave_1;

loc start_1: invariant x_1 <= max_rw
	when lock <> 0 & x_1 > min_rw do {x_1 := 0} goto start_1;

	when lock = 0 & x_1 > min_rw do {x_1 := 0} goto set_1;

loc set_1: invariant x_1 <= max_rw
	(* Actually lock := i *)
	when x_1 > min_rw do {lock := 1, x_1 := 0} goto tryenter_1;

loc tryenter_1: invariant x_1 <= max_delay
	(* Actually lock = i *)
	when x_1 > min_delay & lock = 1 sync enter_1 goto cs_1;
	(* Actually lock <> i *)
	when x_1 > min_delay & lock <> 1 do {x_1 := 0} goto start_1;

loc cs_1: invariant True
	when True do {x_1 := 0, lock := 0} sync leave_1 goto start_1;

end (*pta_1*)



(************************************************************)
automaton pta_2
(************************************************************)
synclabs: enter_2, leave_2;

loc start_2: invariant x_2 <= max_rw
	when lock <> 0 & x_2 > min_rw do {x_2 := 0} goto start_2;

	when lock = 0 & x_2 > min_rw do {x_2 := 0} goto set_2;

loc set_2: invariant x_2 <= max_rw
	(* Actually lock := i *)
	when x_2 > min_rw do {lock := 2, x_2 := 0} goto tryenter_2;

loc tryenter_2: invariant x_2 <= max_delay
	(* Actually lock = i *)
	when x_2 > min_delay & lock = 2 sync enter_2 goto cs_2;
	(* Actually lock <> i *)
	when x_2 > min_delay & lock <> 2 do {x_2 := 0} goto start_2;

loc cs_2: invariant True
	when True do {x_2 := 0, lock := 0} sync leave_2 goto start_2;

end (*pta_2*)




(************************************************************)
automaton observer
(************************************************************)
synclabs : enter_1, enter_2, leave_1, leave_2;

loc obs_waiting: invariant True
	when True sync enter_1 goto obs_1;
	when True sync enter_2 goto obs_2;

loc obs_1: invariant True
	when True sync leave_1 goto obs_waiting;
	when True sync enter_2 goto obs_violation;

loc obs_2: invariant True
	when True sync leave_2 goto obs_waiting;
	when True sync enter_1 goto obs_violation;

loc obs_violation: invariant True
(* 	HACK : no outgoing action to reduce state space *)

end (* observer *)


(************************************************************)
(* Initial state *)
(************************************************************)


init := {
	
    discrete =
		(*------------------------------------------------------------*)
		(* Initial location *)
		(*------------------------------------------------------------*)
		loc[pta_1]		:= start_1,
		loc[pta_2]		:= start_2,
		loc[observer]	:= obs_waiting,

		(*------------------------------------------------------------*)
		(* Initial discrete variables assignments *)
		(*------------------------------------------------------------*)
		lock := 0,

    ;

    continuous =        
		(*------------------------------------------------------------*)
		(* Initial clock constraints *)
		(*------------------------------------------------------------*)
		& x_1 = 0
		& x_2 = 0

		(*------------------------------------------------------------*)
		(* Parameter constraints *)
		(*------------------------------------------------------------*)
		& 0 <= min_rw
		& min_rw <= max_rw
		& 0 <= min_delay
		& min_delay <= max_delay
		
		(* For EF to be fair with EFIM *)
		& max_rw <= 10
		& max_delay <= 10
	;
}

(************************************************************)
(* The end *)
(************************************************************)
end
